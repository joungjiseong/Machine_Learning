from tensorflow.keras.models import load_model
import pickle
import pandas as pd
import numpy as np
import re
from tensorflow.keras.preprocessing.sequence import pad_sequences

# 함수 정의
def count_special_characters(text):
    return len(re.findall(r'[^\w\s]', text))

def count_emojis(text):
    emoji_pattern = re.compile(
        "[\U0001F600-\U0001F64F"
        "\U0001F300-\U0001F5FF"
        "\U0001F680-\U0001F6FF"
        "\U0001F700-\U0001F77F"
        "\U0001F780-\U0001F7FF"
        "\U0001F800-\U0001F8FF"
        "\U0001F900-\U0001F9FF"
        "\U0001FA00-\U0001FA6F"
        "\U0001FA70-\U0001FAFF"
        "\U00002702-\U000027B0"
        "]+", flags=re.UNICODE)
    return len(emoji_pattern.findall(text))

# 모델 및 토크나이저 로드
loaded_model = load_model('spamModel.h5')
with open('tokenizer.pkl', 'rb') as file:
    tokenizer = pickle.load(file)

# 테스트 데이터 준비
test_data = pd.DataFrame({
    'MailName': [
        "한정 기간! 최신 스마트폰 90% 할인! 지금 바로 구매하세요 🎉",             #스팸 제목
        "당신의 계정이 해킹되었습니다. 비밀번호를 재설정하세요⚠️",                 #스팸 제목
        "당첨 축하드립니다! ☘️ 지금 바로 확인해 상품을 수령하세요 🎁",            #스팸 제목
        "📢 중요한 공지사항 확인 바랍니다!",       #정상 제목
        "새로운 기기에서 로그인이 확인되었습니다 ⚠️",            #정상 제목
        "2024년 1학기 수업 운영 방식별 출석 체크 안내",                 #정상 제목
    ],
    'special_char_count': [
        count_special_characters("한정 기간! 최신 스마트폰 90% 할인! 지금 바로 구매하세요 🎉"),
        count_special_characters("당신의 계정이 해킹되었습니다. 비밀번호를 재설정하세요⚠️"),
        count_special_characters("당첨 축하드립니다! ☘️ 지금 바로 확인해 상품을 수령하세요 🎁"),
        count_special_characters("📢 중요한 공지사항 확인 바랍니다! ⚠️"),
        count_special_characters("새로운 기기에서 로그인이 확인되었습니다"),
        count_special_characters("2024년 1학기 수업 운영 방식별 출석 체크 안내"),
    ],
    'emoji_count': [
        count_emojis("한정 기간! 최신 스마트폰 90% 할인! 지금 바로 구매하세요 🎉"),
        count_emojis("당신의 계정이 해킹되었습니다. 비밀번호를 재설정하세요⚠️"),
        count_emojis("당첨 축하드립니다! ☘️ 지금 바로 확인해 상품을 수령하세요 🎁"),
        count_emojis("📢 중요한 공지사항 확인 바랍니다! ⚠️"),
        count_emojis("새로운 기기에서 로그인이 확인되었습니다"),
        count_emojis("2024년 1학기 수업 운영 방식별 출석 체크 안내"),
    ]
})

X_test = test_data[['MailName', 'special_char_count', 'emoji_count']]
max_len = 64

# 전처리
X_test_encoded = tokenizer.texts_to_sequences(X_test['MailName'])
X_test_padded = pad_sequences(X_test_encoded, maxlen=max_len)
X_test_special = np.hstack([X_test[['special_char_count', 'emoji_count']].values])

# 예측 실행
predictions = loaded_model.predict([X_test_padded, X_test_special])
for i, pred in enumerate(predictions):
    print(f"이메일: {X_test['MailName'].iloc[i]}")
    print(f"예측 확률: {pred[0]:.4f}")
    print("예측 결과: 스팸" if pred[0] < 0.2 else "예측 결과: 정상")
